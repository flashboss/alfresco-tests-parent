<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>it.vige</groupId>
	<artifactId>alfresco-tests-activiti-sample</artifactId>
	<name>Alfresco Tests Activiti sample</name>
	<version>7.4.0.1.6</version>
	<description>Simple AMP Activiti sample for tests</description>
	<packaging>jar</packaging>
	<prerequisites>
		<maven>3.3.0</maven>
	</prerequisites>

	<!-- SDK properties have sensible defaults in the SDK parent, but you can 
		override the properties below to use another version. For more available 
		properties see the alfresco-sdk-parent POM. -->
	<properties>
		<!-- Alfresco Maven Plugin version to use -->
		<alfresco.sdk.version>4.6.0</alfresco.sdk.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Properties used in dependency declarations, you don't need to change these -->
		<alfresco.groupId>org.alfresco</alfresco.groupId>
		<alfresco.bomDependencyArtifactId>acs-packaging</alfresco.bomDependencyArtifactId>
		<alfresco.platform.version>7.4.0.1</alfresco.platform.version>

		<!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
		<jrebel.version>1.1.8</jrebel.version>

		<!-- This parameter is only required for those cases in which ACS is not 
			exposed in http://localhost:8080/alfresco (i.e. Windows Docker) -->
		<test.acs.endpoint.path />

	</properties>

	<!-- Libs used in Unit and Integration tests -->
	<!-- IMPORTANT - Test dependencies need to be here in the top parent POM 
		as the Alfresco Maven IT Mojo runs as part of the parent project ... -->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>4.2.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- The main Alfresco Repo dependency for compiling Java code in src/main/java -->
		<dependency>
			<groupId>${alfresco.groupId}</groupId>
			<artifactId>alfresco-remote-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>it.vige</groupId>
			<artifactId>alfresco-tests</artifactId>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Bring in Alfresco RAD so we get access to AlfrescoTestRunner classes -->
		<dependency>
			<groupId>org.alfresco.maven</groupId>
			<artifactId>alfresco-rad</artifactId>
			<version>${alfresco.sdk.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.214</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<!-- This will import the dependencyManagement for all artifacts in the 
				selected Alfresco platform. NOTE: You still need to define dependencies in 
				your POM, but you can omit version as it's enforced by this dependencyManagement. 
				NOTE: It defaults to the latest version this SDK pom has been tested with, 
				but alfresco version can/should be overridden in your project's pom -->
			<dependency>
				<groupId>${alfresco.groupId}</groupId>
				<artifactId>${alfresco.bomDependencyArtifactId}</artifactId>
				<version>${alfresco.platform.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<build>
		<pluginManagement>
			<plugins>

				<!-- Filter resources in any sub-project with this config -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<nonFilteredFileExtensions>
							<!-- jpg, jpeg, gif, bmp and png are added automatically -->
							<nonFilteredFileExtension>ftl</nonFilteredFileExtension>
							<nonFilteredFileExtension>acp</nonFilteredFileExtension>
							<nonFilteredFileExtension>svg</nonFilteredFileExtension>
							<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
							<nonFilteredFileExtension>doc</nonFilteredFileExtension>
							<nonFilteredFileExtension>docx</nonFilteredFileExtension>
							<nonFilteredFileExtension>xls</nonFilteredFileExtension>
							<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
							<nonFilteredFileExtension>ppt</nonFilteredFileExtension>
							<nonFilteredFileExtension>pptx</nonFilteredFileExtension>
							<nonFilteredFileExtension>bin</nonFilteredFileExtension>
							<nonFilteredFileExtension>lic</nonFilteredFileExtension>
							<nonFilteredFileExtension>swf</nonFilteredFileExtension>
							<nonFilteredFileExtension>zip</nonFilteredFileExtension>
							<nonFilteredFileExtension>msg</nonFilteredFileExtension>
							<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							<nonFilteredFileExtension>ttf</nonFilteredFileExtension>
							<nonFilteredFileExtension>eot</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff2</nonFilteredFileExtension>
							<nonFilteredFileExtension>css</nonFilteredFileExtension>
							<nonFilteredFileExtension>ico</nonFilteredFileExtension>
							<nonFilteredFileExtension>psd</nonFilteredFileExtension>
							<nonFilteredFileExtension>js</nonFilteredFileExtension>
						</nonFilteredFileExtensions>

					</configuration>
				</plugin>
				<plugin>
					<groupId>org.zeroturnaround</groupId>
					<artifactId>jrebel-maven-plugin</artifactId>
					<version>${jrebel.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>3.0.0-M1</version>
					<executions>
						<execution>
							<id>integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify-test</id>
							<phase>verify</phase>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>

					<dependencies>
						<dependency>
							<groupId>org.apache.maven.surefire</groupId>
							<artifactId>surefire-junit47</artifactId>
							<version>3.0.0-M1</version>
						</dependency>
					</dependencies>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<!-- Make sure resources in sub-projects are filtered -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<!-- Filter the test resource files in this project and do property substitutions -->
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>17</release>
				</configuration>
			</plugin>

			<!-- Filter the test resource files in the AIO parent project, and do 
				property substitutions. We need this config so this is done before the Alfresco 
				Maven Plugin 'run' is executed. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<inherited>false</inherited>
				<!-- Run only for the AIO parent Project -->
				<executions>
					<execution>
						<id>copy-and-filter-docker-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>

						<configuration>
							<outputDirectory>${project.build.outputDirectory}/docker</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compress JavaScript files and store as *-min.js -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.5.1</version>
				<executions>
					<!-- Compress the JS files under the assembly folder -->
					<execution>
						<id>compress-assembly</id>
						<goals>
							<goal>compress</goal>
						</goals>

						<configuration>
							<sourceDirectory>${project.basedir}/src/main/assembly/web</sourceDirectory>
							<outputDirectory>${project.basedir}/src/main/assembly/web</outputDirectory>
							<excludes>
								<exclude>**/webscripts/**</exclude>
								<exclude>**/site-webscripts/**</exclude>
								<exclude>**/META-INF/**</exclude>
								<exclude>**/*.lib.js</exclude>
								<exclude>**/*.css</exclude>
								<exclude>**/*-min.js</exclude>
								<exclude>**/*-min.css</exclude>
							</excludes>
							<force>true</force>
							<jswarn>false</jswarn>
						</configuration>
					</execution>

					<!-- Compress the JS files under the resources folder -->
					<execution>
						<id>compress-resources</id>
						<goals>
							<goal>compress</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/webscripts/**</exclude>
								<exclude>**/site-webscripts/**</exclude>
								<exclude>**/*.lib.js</exclude>
								<exclude>**/*.css</exclude>
								<exclude>**/*-min.js</exclude>
								<exclude>**/*-min.css</exclude>
							</excludes>
							<force>true</force>
							<jswarn>false</jswarn>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Hot reloading with JRebel -->
			<plugin>
				<groupId>org.zeroturnaround</groupId>
				<artifactId>jrebel-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>generate-rebel-xml</id>
						<phase>process-resources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- For more information about how to configure JRebel plugin see: 
						http://manuals.zeroturnaround.com/jrebel/standalone/maven.html#maven-rebel-xml -->
					<classpath>
						<fallback>all</fallback>
						<resources>
							<resource>
								<directory>${project.build.outputDirectory}</directory>
								<directory>${project.build.testOutputDirectory}</directory>
							</resource>
						</resources>
					</classpath>

					<!-- alwaysGenerate - default is false If 'false' - rebel.xml is generated 
						if timestamps of pom.xml and the current rebel.xml file are not equal. If 
						'true' - rebel.xml will always be generated -->
					<alwaysGenerate>true</alwaysGenerate>
				</configuration>

			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${skipTests}</skipTests>
					<excludes>
						<exclude>**/*RemoteWSTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>java8</id>
			<activation>
				<jdk>[1.8,11.0)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>java11</id>
			<activation>
				<jdk>[11.0,17)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<release>11</release>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>java17</id>
			<activation>
				<jdk>[17,)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<release>17</release>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<!-- Alfresco Maven Repositories -->
	<repositories>
		<repository>
			<id>alfresco-public</id>
			<url>https://artifacts.alfresco.com/nexus/content/groups/public</url>
		</repository>
		<repository>
			<id>alfresco-public-snapshots</id>
			<url>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
		</repository>
		<!-- Alfresco Enterprise Edition Artifacts, put username/pwd for server 
			in settings.xml -->
		<repository>
			<id>alfresco-private-repository</id>
			<url>https://artifacts.alfresco.com/nexus/content/groups/private</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>alfresco-plugin-public</id>
			<url>https://artifacts.alfresco.com/nexus/content/groups/public</url>
		</pluginRepository>
		<pluginRepository>
			<id>alfresco-plugin-public-snapshots</id>
			<url>https://artifacts.alfresco.com/nexus/content/groups/public-snapshots</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
</project>
