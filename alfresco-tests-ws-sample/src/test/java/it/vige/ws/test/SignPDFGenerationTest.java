package it.vige.ws.test;

import static org.springframework.extensions.webscripts.Status.STATUS_OK;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.alfresco.mock.test.ws.AbstractWSForm;
import org.alfresco.mock.test.ws.MockWebScriptRequest;
import org.alfresco.mock.test.ws.MockWebScriptResponse;
import org.alfresco.model.ContentModel;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.repository.StoreRef;
import org.alfresco.service.cmr.search.SearchService;
import org.alfresco.service.namespace.QName;
import org.apache.commons.io.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.extensions.webscripts.AbstractWebScript;
import org.springframework.extensions.webscripts.WebScriptRequest;

import com.google.common.io.ByteStreams;

import it.vige.ws.api.SignPDFGeneration;
import it.vige.ws.dom.VigeWSContentModel;

public class SignPDFGenerationTest extends AbstractWSForm {

	private final static Log logger = LogFactory.getLog(SignPDFGenerationTest.class);
	private final static String ID_PARTNER = "prova";
	private final static String ID_PRATICA = "prova";
	private final static String DRL_NAME = "rf_006";
	private final static String MESE_PRATICA = "01";
	private final static String ANNO_PRATICA = "1980";
	private final static String ID_DOC = "idddddd";
	private final static String FOLDER_RISULTATO = "/sites/vige-site/documentLibrary/Questions/" + ID_PARTNER + "/"
			+ ANNO_PRATICA + "/" + MESE_PRATICA + "/" + ID_PRATICA + "/Autogenerated/" + DRL_NAME + ".pdf";
	private Map<String, String> templateVars;

	@Autowired
	private SignPDFGeneration signPDFGeneration;

	@Autowired
	private NodeService nodeService;

	@Override
	protected AbstractWebScript getAbstractWebScript() {
		return signPDFGeneration;
	}

	@Before
	public void init() {
		super.init();
		templateVars = new HashMap<String, String>();
		templateVars.put("idpartner", ID_PARTNER);
		templateVars.put("idpratica", ID_PRATICA);
		templateVars.put("annopratica", ANNO_PRATICA);
		templateVars.put("mesepratica", MESE_PRATICA);

		// Creating initial folders and sites
		NodeRef bdm = insertFolder(sites, "vige-site");
		NodeRef bdmDL = insertFolder(bdm, "documentLibrary");
		insertFolder(bdmDL, "Questions");
		NodeRef sys = insertFolder(bdmDL, "sys");
		NodeRef rules = insertFolder(sys, "Rules");
		NodeRef template = insertFolder(sys, "Template");
		NodeRef generic = insertFolder(template, "Generic");

		Map<QName, Serializable> properties = new HashMap<QName, Serializable>();
		properties.put(ContentModel.PROP_NAME, DRL_NAME + ".drl");
		InputStream content = this.getClass().getClassLoader().getResourceAsStream("rules/" + DRL_NAME + ".drl");
		try {
			insertDocument(rules, DRL_NAME + ".drl", ByteStreams.toByteArray(content), properties);
		} catch (Exception ex) {
			logger.error(ex);
		}
		properties = new HashMap<QName, Serializable>();
		properties.put(ContentModel.PROP_NAME, DRL_NAME + ".docx");
		try {
			File file = new File("src/test/resources/docs/" + DRL_NAME + ".docx");
			content = FileUtils.openInputStream(file);
			insertDocument(generic, DRL_NAME + ".docx", ByteStreams.toByteArray(content), properties);
		} catch (Exception ex) {
			logger.error(ex);
		}
	}

	@Test
	public void execute() throws ParseException, IOException {

		logger.debug("start test");
		SearchService searchService = serviceRegistry.getSearchService();
		InputStream jsonStream = this.getClass().getClassLoader().getResourceAsStream("json_lecters.json");
		String json = new String(ByteStreams.toByteArray(jsonStream));
		Map<String, Serializable> fields = new HashMap<String, Serializable>();
		{
			fields.put("prova", json);
		}
		WebScriptRequest webScriptRequest = new MockWebScriptRequest("json", templateVars, signPDFGeneration, fields,
				serviceRegistry);
		MockWebScriptResponse webScriptResponse = new MockWebScriptResponse();
		signPDFGeneration.execute(webScriptRequest, webScriptResponse);

		// Verify
		List<NodeRef> nodeRefs = searchService
				.query(StoreRef.STORE_REF_WORKSPACE_SPACESSTORE, SearchService.LANGUAGE_XPATH, FOLDER_RISULTATO)
				.getNodeRefs();
		NodeRef result = nodeRefs.get(0);
		Assert.assertNotNull("Folder created", result);
		Set<QName> aspects = nodeService.getAspects(result);
		for (QName aspect : aspects) {
			if (aspect.equals(ContentModel.ASPECT_TITLED))
				Assert.assertEquals("The signed document looks like the title", ContentModel.ASPECT_TITLED, aspect);
			else {
				Assert.assertEquals("The signed document looks like the doc", VigeWSContentModel.DOC_ASPECT, aspect);
				String idDoc = (String) nodeService.getProperty(result, VigeWSContentModel.ID_DOC);
				Assert.assertEquals("The document has the name of the file", ID_DOC, idDoc);
			}
		}
		Map<String, Object> model = webScriptResponse.getModel();
		Assert.assertEquals("Status ok", STATUS_OK + "", model.get("status").toString());
		logger.debug("end test");
	}
}